deepdive {

    schema.variables {
        _annotated_sentences.has_term: Boolean
    }
    extraction.parallelism: 4

    extraction.extractors {

        # Extractor 1: Clean output tables of all extractors
        EXT_CLEAR_TABLES {
	    style: "sql_extractor"
	    sql: """
            DELETE FROM _extracted_features;
	    """
	    # DELETE FROM _raw_sentences; # set with initdb.sh
	    # DELETE FROM _annotated_features; # set with initdb.sh
        }
        
	# Extractor ?: maybe NLP to get bags of words (currently handled externally).

  	# Extractor 2: individual lemmas, bilemmas as features
	EXTRACT_FEATURES {
	    style: "tsv_extractor"
	    input: """
	         SELECT sentence_id, 
                        array_to_string(words, '~^~')
		 FROM _annotated_sentences;
		 """
	    output_relation: "_extracted_features"
	    udf: ${APP_HOME}"/udf/dd_extract_features.py"
	    dependencies: ["EXT_CLEAR_TABLES"]
        }
	
    } # extractors

    inference.factors {
        IS_ASSOCIATED_TO_RDOC_TERM {
            input_query: """
                SELECT
                    s.id AS "_an_sentences.id",
                    s.has_term AS "_an_sentences.has_term",
                    f.feature AS "feature"
                FROM
                    _annotated_sentences AS s,
                    _extracted_features AS f
                WHERE
                    (s.sentence_id = f.sentence_id)
                """
            function: "IsTrue(_an_sentences.has_term)"
            weight: "?(feature)"
        }
    }

    calibration.holdout_fraction: 0.25
}